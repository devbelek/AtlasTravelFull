'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('use-intl/core');
var RequestLocale = require('./RequestLocale.js');
var getRuntimeConfig = require('next-intl/config');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var getRuntimeConfig__default = /*#__PURE__*/_interopDefault(getRuntimeConfig);

// Make sure `now` is consistent across the request in case none was configured
function getDefaultNowImpl() {
  return new Date();
}
const getDefaultNow = React.cache(getDefaultNowImpl);

// This is automatically inherited by `NextIntlClientProvider` if
// the component is rendered from a Server Component
function getDefaultTimeZoneImpl() {
  return Intl.DateTimeFormat().resolvedOptions().timeZone;
}
const getDefaultTimeZone = React.cache(getDefaultTimeZoneImpl);
async function receiveRuntimeConfigImpl(getConfig, localeOverride) {
  if (typeof getConfig !== 'function') {
    throw new Error("Invalid i18n request configuration detected.\n\nPlease verify that:\n1. In case you've specified a custom location in your Next.js config, make sure that the path is correct.\n2. You have a default export in your i18n request configuration file.\n\nSee also: https://next-intl-docs.vercel.app/docs/usage/configuration#i18n-request\n");
  }
  let hasReadLocale = false;

  // In case the consumer doesn't read `params.locale` and instead provides the
  // `locale` (either in a single-language workflow or because the locale is
  // read from the user settings), don't attempt to read the request locale.
  const params = {
    get locale() {
      hasReadLocale = true;
      return localeOverride || RequestLocale.getRequestLocale();
    }
  };
  let result = getConfig(params);
  if (result instanceof Promise) {
    result = await result;
  }
  {
    if (hasReadLocale) {
      if (result.locale) {
        console.error("\nYou've read the `locale` param that was passed to `getRequestConfig` but have also returned one from the function. This is likely an error, please ensure that you're consistently using a setup with or without i18n routing: https://next-intl-docs.vercel.app/docs/getting-started/app-router\n");
      }
    } else {
      if (!result.locale) {
        console.error("\nYou haven't read the `locale` param that was passed to `getRequestConfig` and also haven't returned one from the function. This is likely an error, please ensure that you're consistently using a setup with or without i18n routing: https://next-intl-docs.vercel.app/docs/getting-started/app-router\n");
      }
    }
  }
  return {
    ...result,
    locale: result.locale || params.locale,
    now: result.now || getDefaultNow(),
    timeZone: result.timeZone || getDefaultTimeZone()
  };
}
const receiveRuntimeConfig = React.cache(receiveRuntimeConfigImpl);
const getFormatters = React.cache(core._createIntlFormatters);
const getCache = React.cache(core._createCache);
async function getConfigImpl(localeOverride) {
  const runtimeConfig = await receiveRuntimeConfig(getRuntimeConfig__default.default, localeOverride);
  return {
    ...core.initializeConfig(runtimeConfig),
    _formatters: getFormatters(getCache())
  };
}
const getConfig = React.cache(getConfigImpl);

exports.default = getConfig;
